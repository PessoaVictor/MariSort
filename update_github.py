#!/usr/bin/env python3
"""
Script para atualizar a lista de participantes no GitHub
Uso: python update_github.py
"""

import json
import os
import subprocess
import sys
from datetime import datetime

def update_github_repo():
    """Atualiza o reposit√≥rio GitHub com as altera√ß√µes na lista de participantes."""
    try:
        # Verifica se estamos em um reposit√≥rio Git
        result = subprocess.run(['git', 'status'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå Erro: Este diret√≥rio n√£o √© um reposit√≥rio Git.")
            return False
        
        # Adiciona as altera√ß√µes
        subprocess.run(['git', 'add', 'participantes.json'], check=True)
        
        # Verifica se h√° altera√ß√µes para commit
        result = subprocess.run(['git', 'diff', '--staged', '--quiet'], capture_output=True)
        if result.returncode == 0:
            print("‚ÑπÔ∏è  Nenhuma altera√ß√£o encontrada na lista de participantes.")
            return True
        
        # Cria o commit com timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        commit_message = f"Atualiza√ß√£o autom√°tica da lista de participantes - {timestamp}"
        
        subprocess.run(['git', 'commit', '-m', commit_message], check=True)
        print(f"‚úÖ Commit criado: {commit_message}")
        
        # Faz o push para o GitHub
        subprocess.run(['git', 'push', 'origin', 'main'], check=True)
        print("üöÄ Altera√ß√µes enviadas para o GitHub com sucesso!")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar comando Git: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def validate_participants_json():
    """Valida o arquivo participantes.json."""
    try:
        with open('participantes.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not isinstance(data.get('participantes'), list):
            print("‚ùå Erro: 'participantes' deve ser uma lista.")
            return False
        
        if len(data['participantes']) == 0:
            print("‚ö†Ô∏è  Aviso: Lista de participantes est√° vazia.")
        
        print(f"‚úÖ Arquivo v√°lido com {len(data['participantes'])} participantes.")
        return True
        
    except FileNotFoundError:
        print("‚ùå Erro: Arquivo participantes.json n√£o encontrado.")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro: JSON inv√°lido - {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("üîÑ Iniciando atualiza√ß√£o do GitHub...")
    
    # Valida o arquivo JSON
    if not validate_participants_json():
        sys.exit(1)
    
    # Atualiza o GitHub
    if update_github_repo():
        print("‚ú® Processo conclu√≠do com sucesso!")
    else:
        print("üí• Falha na atualiza√ß√£o.")
        sys.exit(1)

if __name__ == "__main__":
    main()
